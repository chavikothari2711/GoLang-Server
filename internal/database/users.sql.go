// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (id, created_at, updated_at, name,email, api_key)
VALUES ($1, $2, $3, $4, $5, encode(sha256(random()::text::bytea),'hex'))
RETURNING id, created_at, updated_at, name, email, api_key
`

type CreateUsersParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Email     string
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKeys = `-- name: GetUserByAPIKeys :one
SELECT id, created_at, updated_at, name, email, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKeys(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKeys, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT id, created_at, updated_at, name, email, api_key FROM users WHERE email = $1
`

func (q *Queries) GetUsers(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const updateUsers = `-- name: UpdateUsers :one
UPDATE users 
SET name = $1, email = $2, updated_at = $3 WHERE api_key = $4
RETURNING id, created_at, updated_at, name, email, api_key
`

type UpdateUsersParams struct {
	Name      string
	Email     string
	UpdatedAt time.Time
	ApiKey    string
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsers,
		arg.Name,
		arg.Email,
		arg.UpdatedAt,
		arg.ApiKey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}
